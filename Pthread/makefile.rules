##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := mypthreadtool

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := 

# This defines any additional object files that need to be compiled.
SNAPPY_DIR  = ../snappy

OBJECT_ROOTS := mypthreadtool \
  PthreadUtil \
  PthreadAttr \
  PthreadOnce \
  PthreadKey \
  PthreadMutexAttr \
  PthreadMutex \
  PthreadBarrier \
  PthreadCondAttr \
  PthreadCond \
  PthreadCleanup \
  PthreadCancel \
  PthreadJoin \
  PthreadMalloc \
  EEPthreadSim \
  EEPthreadScheduler \
  PTS \
  snappy-c \
  snappy-sinksource \
  snappy-stubs-internal \
  snappy

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS := libmypthread

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################
# Build the intermediate object file.
SNAPPY_FLAGS    += $(TOOL_CXXFLAGS) -Wno-unused-variable
TOOL_CXXFLAGS   += -std=c++11 -D_REENTRANT -Wl,--as-needed -I$(SNAPPY_DIR) -I$(SNAPPY_DIR)/build
TOOL_LIBS       += -pthread

# Add the required library path to McSimA+
$(OBJDIR)PthreadUtil$(OBJ_SUFFIX): PthreadUtil.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadJoin$(OBJ_SUFFIX): PthreadJoin.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadCancel$(OBJ_SUFFIX): PthreadCancel.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadAttr$(OBJ_SUFFIX): PthreadAttr.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadKey$(OBJ_SUFFIX): PthreadKey.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadBarrier$(OBJ_SUFFIX): PthreadBarrier.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadOnce$(OBJ_SUFFIX): PthreadOnce.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadMutexAttr$(OBJ_SUFFIX): PthreadMutexAttr.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadMutex$(OBJ_SUFFIX): PthreadMutex.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadCondAttr$(OBJ_SUFFIX): PthreadCondAttr.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadCond$(OBJ_SUFFIX): PthreadCond.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadCleanup$(OBJ_SUFFIX): PthreadCleanup.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PthreadMalloc$(OBJ_SUFFIX): PthreadMalloc.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)EEPthreadSim$(OBJ_SUFFIX): EEPthreadSim.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)EEPthreadScheduler$(OBJ_SUFFIX): EEPthreadScheduler.cpp EEPthreadScheduler.h PTS.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)PTS$(OBJ_SUFFIX): PTS.cpp PTS.h
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)mcsim_snappy$(OBJ_SUFFIX): mcsim_snappy.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)mypthreadtool$(OBJ_SUFFIX): mypthreadtool.cpp
	$(CXX) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<


## Build google snappy source files.
$(OBJDIR)snappy-c$(OBJ_SUFFIX): $(SNAPPY_DIR)/snappy-c.cc
	$(CXX) $(SNAPPY_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)snappy-sinksource$(OBJ_SUFFIX): $(SNAPPY_DIR)/snappy-sinksource.cc
	$(CXX) $(SNAPPY_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)snappy-stubs-internal$(OBJ_SUFFIX): $(SNAPPY_DIR)/snappy-stubs-internal.cc
	$(CXX) $(SNAPPY_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<

$(OBJDIR)snappy$(OBJ_SUFFIX): $(SNAPPY_DIR)/snappy.cc
	$(CXX) $(SNAPPY_FLAGS) $(TOOL_CXXFLAGS) $(COMP_OBJ)$@ $<


# Build the tool as a dll (shared object).
$(OBJDIR)mypthreadtool$(PINTOOL_SUFFIX): $(OBJDIR)PthreadMalloc$(OBJ_SUFFIX) $(OBJDIR)PthreadCancel$(OBJ_SUFFIX) $(OBJDIR)PthreadCondAttr$(OBJ_SUFFIX) $(OBJDIR)PthreadCleanup$(OBJ_SUFFIX) $(OBJDIR)PthreadCond$(OBJ_SUFFIX) $(OBJDIR)PthreadCondAttr$(OBJ_SUFFIX) $(OBJDIR)PthreadMutex$(OBJ_SUFFIX) $(OBJDIR)PthreadMutexAttr$(OBJ_SUFFIX) $(OBJDIR)PthreadOnce$(OBJ_SUFFIX) $(OBJDIR)PthreadUtil$(OBJ_SUFFIX) $(OBJDIR)PthreadJoin$(OBJ_SUFFIX) $(OBJDIR)PthreadAttr$(OBJ_SUFFIX) $(OBJDIR)PthreadKey$(OBJ_SUFFIX) $(OBJDIR)PthreadBarrier$(OBJ_SUFFIX) $(OBJDIR)EEPthreadScheduler$(OBJ_SUFFIX) $(OBJDIR)EEPthreadSim$(OBJ_SUFFIX) $(OBJDIR)PTS$(OBJ_SUFFIX) $(OBJDIR)snappy-c$(OBJ_SUFFIX) $(OBJDIR)snappy-sinksource$(OBJ_SUFFIX) $(OBJDIR)snappy-stubs-internal$(OBJ_SUFFIX) $(OBJDIR)snappy$(OBJ_SUFFIX) $(OBJDIR)mypthreadtool$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $(^:%.h=) $(TOOL_LPATHS) $(TOOL_LIBS)


###### Special libs' build rules ######
$(OBJDIR)mypthread$(OBJ_SUFFIX): mypthread.cpp
	$(CXX) $(COMP_OBJ)$@ $<

$(OBJDIR)libmypthread$(LIB_SUFFIX): $(OBJDIR)mypthread$(OBJ_SUFFIX)
	$(ARCHIVER)$(OBJDIR)libmypthread$(LIB_SUFFIX) $<
